@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle


abstract class AppDataBase {
    ..Entities..
    IntegerValue
    TimeValue
    ..TypeConverters..
    DateTimeConversion
    UserConversion
}

package Entities {
    '@Entity(primaryKeys=["projectId", "createdOn", "createdBy"])
    class RowEntity {
        projectId: Integer
        createdOn: DateTime
        createdBy: User
        values: String
        publishedOnServer: DateTime
    }

    '@Entity
    class ProjectEntity {
        'PrimaryKey
        id: Integer
        '@Embedded
        skeleton: ProjectSkeletonEntity
        admin: User
        onlineId: String
    }
    ProjectEntity - ProjectSkeletonEntity

    '@Entity
    class ProjectTemplateEntity {
        id: Integer
        '@Embedded
        skeleton: ProjectSkeletonEntity
        createdBy: User
    }
    ProjectSkeletonEntity -- ProjectTemplateEntity

    '@Entity(primaryKey=["id", "projectId"])
    class GraphEntity {
        id: Integer
        projectId: Integer
        dataTransformation: Project::DataTransformation
        type: GraphType
        path: String
    }
  
    '@Entity
    class GraphTemplateEntity {
        '@PrimaryKey
        id: Integer
        name: String
        description: String
        type: GraphType
        createdBy: String
    }

    '@Entity(primaryKey=["projectId", "name"])
    class ProjectSettingEntity {
        projectId: Integer
        name: String
        value: String
    }

    '@Entity(primaryKey=["graphId", "name"])
    class GraphSettingEntity {
        graphId: Integer
        name: String
        value: String
    }

    '@Entity(primaryKey=["projectId", "user"])
    class ProjectUserMap {
        projectId: Integer
        user: User
    }

    '@Entity(primaryKey=["projectId", "id"])
    class UIElementMap {
        projectId: Integer
        id: Integer
        columnId: Integer
        type: String
        state: String
    }

    '@Entity(primaryKey=["projectId", "id"])
    class NotificationEntity {
        projectId: Integer
        id: Integer
        params: String
        message: String
    }

    '@Entity(primaryKey=["projectId", "version"])
    class MigrationEntity {
        projectId: Integer
        version: Integer
        type: MigrationOperation
        columnId: Integer
        parameter: String
        publishedOnServer: DateTime
    }

    '@Entity(primaryKey=["projectId", "from", "until"])
    class MissingSlotEntity {
        projectId: Integer
        from: DateTime
        until: DateTime
    }
  
    class ProjectSkeletonEntity {
        name: String
        description: String
        wallpaper: String
        layout: String
    }
}

class ProjectData {
    id: Integer
    name: String
    description: String
    onlineId: Boolean
    wallpaper: String
}

package DAOs {
    class ProjectCDManager {
        +insertProject(project: Project): Project
        +deleteProject(project: Project)
        +insertProjectTemplate(template: ProjectTemplate): Integer
        +deleteProjectTemplate(template: ProjectTemplate)
        ~isTemplate(id: Integer): Boolean
        -getNextId(projectId: Integer): Integer
        -createSkeleton(project: Project): ProjectSkeletonEntity
        -insertProjectEntity(project: Project): Integer
    }

    class GraphCDManager {
        +insertGraph(projectId: Integer, graph: Graph): Integer
        +deleteGraph(projectId: Integer, id: Integer)
        -insertGraphEntity(projectId: Integer, graph: Graph): Integer
        -getNextId(projectId: Integer): Integer
    }

    abstract class TableContentDAO <<abstract>> {
        +getRowsByIds(vararg ids: Integer): Flow<Row>
        +insertRow(row: Row, projectId: Integer)
        +deleteRows(projectId: Integer, vararg rows: Row)
        +changeRow(projectId: Integer, vararg rows: Row)
        '@Insert
        -insertRowEntity(row: RowEntity)
        '@Query("SELECT * FROM row WHERE projectId IN (:ids)")
        -getRowEntitiesByIds(vararg ids: Integer): Flow<RowEntity>
        '@Delete
        -deleteRowEntities(vararg rows: RowEntity)
        '@Update
        -changeRowEntities(vararg rows: RowEntity)
        -buildRowEntity(row: Row, projectId: Integer)
    }

    abstract class ProjectDataDAO <<abstract>> {
        '@Query("SELECT id, name, description, wallpaper, onlineId FROM project")
        +getAllProjectData(): Flow<List<ProjectData>>
        '@Query("SELECT id, name, description, wallpaper, onlineId
        '        FROM   project
        '        WHERE  id IN (:ids)")
        +getProjectDataByIds(vararg ids: Integer): Flow<List<ProjectData>>
        '@Query("SELECT id, name, description, wallpaper, onlineId
        '        FROM   project
        '        WHERE  id = :id)
        +getProjectData(id: Integer): ProjectData
        '@Query("UPDATE project SET name = :name WHERE id = :id")
        +setName(id: Integer, name: String)
        '@Query("UPDATE project SET description = :description WHERE id = :id")
        +setDescription(id: Integer, description: String)
        '@Query("UPDATE project SET wallpaper = :wallpaper WHERE id = :id")
        +setWallpaper(id: Integer, wallpaper: String)
        '@Query("UPDATE project SET onlineId = :onlineId WHERE id = :id")
        +setOnlineId(id: Integer, onlineId: Boolean)
        '@Query("SELECT * FROM user WHERE projectId IN (:ids)")
        +getUsersByIds(vararg ids: Integer): Flow<List<ProjectUserMap>>
        +addUser(projectId: Integer, user User)
        +removeUsers(projectId: Integer, vararg users: User)
        '@Query("SELECT id AS projectId, admin AS user FROM project WHERE id IN (:ids)")
        +getAdminByIds(vararg ids: Integer): Flow<List<ProjectUserMap>>
        '@Query("UPDATE project SET admin = :admin WHERE id = :projectId")
        +changeAdmin(projectId: Integer, admin: User)
        '@Insert
        +insertMissingSlot(missingSlot: MissingSlotEntity)
        '@Delete
        +deleteMissingSlot(missingSlot: MissingSlotEntity)
        '@Query("SELECT * FROM missingSlot WHERE projectId = :projectId")
        +getMissingSlots(projectId: Integer): List<MissingSlotEntity>
        '@Insert
        ~insertProjectEntity(project: ProjectEntity)
        '@Delete
        ~deleteProjectEntity(project: ProjectEntity)
        '@Insert
        -addProjectUserMap(userMap: ProjectUserMap)
        '@Delete
        -removeProjectUserMap(vararg userMaps: ProjectUserMap)
        '@Insert
        -insertUserMap(user: ProjectUserMap)
        '@Delete
        -deleteUserMap(user: ProjectUserMap)
    }

    abstract class SettingsDAO <<abstract>> {
        +getProjectSettings(projectId: Integer): Flow<List<Pair<String, String>>>
        +getGraphSettings(graphId: Integer): Flow<List<Pair<String, String>>>
        +changeProjectSetting(projectId: Integer, key: String, value: String)
        +changeGraphSetting(graphId: Integer, key: String, value: String)
        +createProjectSetting(projectId: Integer, key: String, value: String)
        +createGraphSetting(graphId: Integer, key: String, value: String)
        +deleteProjectSetting(projectId: Integer, key: String, value: String)
        +deleteGraphSetting(graphId: Integer, key: String, value: String)
        '@Query("SELECT name, value FROM projectSetting WHERE projectId = :projectId")
        -getProjectSettingsEntity(projectId: Integer): Flow<List<ProjectSettingEntity>>
        '@Query("SELECT name, value FROM graphSetting WHERE graphId = :graphId")
        -getGraphSettingsEntity(graphId: Integer): Flow<List<GraphSettingEntity>>
        '@Update
        -changeProjectSettingEntity(setting: ProjectSettingEntity)
        '@Update
        -changeGraphSettingEntity(setting: GraphSettingEntity)
        '@Insert
        -createProjectSettingEntity(setting: ProjectSettingEntity)
        '@Insert
        -createGraphSettingEntity(setting: GraphSettingEntity)
        '@Delete
        -deleteProjectSettingEntity(setting: ProjectSettingEntity)
        '@Delete
        -deleteGraphSettingEntity(setting: GraphSettingEntity
    }

    abstract class LayoutDAO <<abstract>> {
        +getLayoutByIds(vararg ids: Integer): Flow<List<TableLayout>>
        +addColumn(id: Integer, type: Class<Any>, before: Integer): Integer
        +deleteColumn(id: Integer, columnId: Integer)
        '@Query("SELECT * FROM migration WHERE projectId = :projectId AND version > :version")
        +getMigrationsSince(projectId: Integer, version: Integer): List<MigrationEntity>
        '@Delete
        +deleteMigration(migration: MigrationEntity)
        '@Query("UPDATE project SET layout = :layout WHERE id = :projectId")
        -changeProjectLayout(projectId: Integer, layout: String)
        '@Query("UPDATE projectTemplate SET layout = :layout WHERE id = :templateId")
        -changeTemplateLayout(templateId: Integer, layout: String)
        '@Query("SELECT layout FROM project WHERE id IN (:ids)")
        -getProjectLayouts(vararg ids: Integer): Flow<List<String>>
        '@Query("SELECT layout FROM projectTemplate WHERE id IN (:ids)")
        -getTemplateLayouts(vararg ids: Integer): Flow<List<String>>
        '@Query("SELECT layout FROM project WHERE id = :id")
        -getProjectLayout(id: Integer): String
        '@Query("SELECT layout FROM projectTemplate WHERE id = :id")
        -getTemplateLayout(id: Integer): String
        '@Insert
        -insertMigration(migration: MigrationEntity)
        -getNextColumnId(id: Integer): Integer
    }

    abstract class GraphDAO <<abstract>> {
        '@Query("SELECT id, projectId, type, path FROM graph WHERE projectId IN (:ids)")
        +getGraphEntityForProjects(vararg ids: Integer): Flow<List<GraphEntity>
        '@Query("UPDATE graph SET path = :path WHERE projectId = :projectId AND id = :id")
        +changePath(projectId: Integer, id: Integer, path: String)
        '@Insert
        ~insertGraph(graph: GraphEntity)
        '@Delete
        ~deleteGraph(graph: GraphEntity)
    }

    abstract class UIElementDAO <<abstract>> {
        '@Query("SELECT * FROM uiElement
        '        WHERE projectId = :projectId
        +getUIElements(projectId: Integer): Flow<List<UIElementMap>>
        +insertUIElement(projectId: Integer, columnId: Integer, type: UIElementType, state: String): Integer
        +removeUIElements(projectId: Integer, vararg ids: Integer)
        '@Query("UPDATE uiElement
        '        SET state = :state
        '        WHERE projectId = :projectID AND id = :id")
        +changeUIElementState(projectId: Integer, id: Integer, state: String)
        '@Delete
        -removeUIElementMap(vararg uiElements: UIElementMap)
        '@Insert
        -insertUIEntity(uiElement: UIElementMap)
        -getNextId(projectId: Integer): Integer
    }

    abstract class NotificationsDAO <<abstract>> {
        +getNotifications(projectId: Integer): Flow<List<Notification>>
        +insertNotification(projectId: Integer, notification: Notification): Integer
        +deleteNotification(projectId: Integer, notification: Notification)
        '@Query("UPDATE notification SET message = :message
        '        WHERE projectId = :projectId AND id = :id")
        +setNotificationMessage(projectId: Integer, id: Integer, message: String)
        '@Query("SELECT * FROM notification WHERE projectId = :projectId")
        -getNotificationEntities(projectId: Integer) Flow<List<NotificationEntity>>
        '@Insert
        -insertNotification(notification: NotificationEntity)
        '@Delete
        -deleteNotification(notification: NotificationEntity)
        -getNextId(projectId: Integer): Integer
    }

    abstract class TemplateDAO <<abstract>> {
        '@Query("SELECT * FROM projectTemplate")
        +getAllProjectTemplateData(): Flow<List<ProjectTemplateEntity>>
        '@Query("SELECT * FROM projectTemplate WHERE id in (:ids)")
        +getProjectTemplateData(vararg ids: Integer): Flow<List<ProjectTemplateEntity>>
        '@Query("SELECT * FROM projectTemplate WHERE createdBy = :creator")
        +getProjectTemplateByCreator(creator: String): Flow<List<ProjectTemplateEntity>>
        '@Query("UPDATE projectTemplate SET name = :name WHERE id = :id")
        +setName(id: Integer, name: String)
        '@Query("UPDATE projectTemplate SET description = :description WHERE id = :id")
        +setDescription(id: Integer, description: String)
        '@Query("UPDATE projectTemplate SET wallpaper = :wallpaper WHERE id = :id")
        +setWallpaper(id: Integer, wallpaper: String)
        '@Query("SELECT * FROM graphTemplate")
        +getAllGraphTemplateData(): Flow<List<GraphTemplateEntity>>
        '@Query("SELECT * FROM graphTemplate WHERE id in (:ids)")
        +getGraphTemplateData(vararg ids: Integer): Flow<List<GraphTemplateEntity>>
        '@Query("SELECT * FROM graphTemplate WHERE createdBy = :creator")
        +getGraphTemplateByCreator(creator: String): Flow<List<GraphTemplateEntity>>
        '@Query("UPDATE graphTemplate SET name = :name WHERE id = :id")
        +setGraphTemplateName(id: Integer, name: String)
        '@Query("UPDATE graphTemplate SET description = :description WHERE id = :id")
        +setGraphTemplateDescription(id: Integer, description: String)
        '@Insert
        ~insertProjectTemplate(project: ProjectTemplateEntity)
        '@Delete
        ~deleteProjectTemplate(project: ProjectTemplateEntity)
        '@Insert
        ~insertGraphTemplate(graph: GraphTemplateEntity)
        '@Delete
        ~deleteGraphTemplate(graph: GraphTemplateEntity)
    }
}

package TypeConverters {
    class DateTimeConversion {
        DateTimeToLong(DateTime): Long
        LongToDateTime(Long): DateTime
    }

    class UserConversion {
        UserToString(User): String
        StringToUser(String): User
    }

    class UIElementTypeConversion {
        UIElementToString(UIElementType): String
        StringToUIElement(String): UIElementType
    }

    class TransformationConversion {
        TraFoToString(Project::DataTransformation): String
        StringToTraFo(String): Project::DataTransformation
    }

    class GraphTypeConversion {
        GraphTypeToString(GraphType): String
        StringToGraphType(String): GraphType
    }
}

note bottom of UserConversion
    might want to save users as
    json (UserId, name, dont know
    what else?)
end note

class TableAccess {
  getRow(row: Integer)
}

class Project {
  - name: String
  - description: String
  ~ Constructor(ProjectTemplate) : Project
  ~ setName(String)
}
Project - "0..1" Wallpaper : has >
Project -- "0..n" Notification : has >
Project "1" - "1" Table : has data of <
Project "1" -- "0..n" Graph


class Wallpaper {
  name: String
  path: String
  'Some kind of method to read the specified file and return the image or whatever is needed for the UI
}

class Notification {
  
}

class Table {
  getRow(Integer) : Collection<DataType>
}
'Das sollten wahrscheinlich unbounded Arrays werden
Table -- "1..n" ProjectTableColumnProperties
Table - "0..m" ProjectTableRow

class ProjectTableRow {
  
}
ProjectTableRow - "1..n" ProjectEntry

class ProjectEntry<T> {
  value: T
}

class ProjectTableColumnProperties {
  - id: Integer
  - name: String
  - unit: String
  - uiElement: () -> Unit
}

class Graph {
  
}
Graph -- GraphCustomizing : has >
Graph - GraphData : is generated from >
(Graph, GraphData) .. TableGraphTransformation : by applying

class GraphData {
  
}
GraphData o-- "1..n" DataSeries

class DataSeries {
  
}

class GraphCustomizing {
  
}

class TableGraphTransformation {
  
}

RoomDatabase <|-- AppDataBase

AppDataBase -[hidden]-> TableAccess
Table -[hidden]-> Wallpaper
SettingsDAO -[hidden]-> RowEntity
LayoutDAO -[hidden]-> SettingsDAO
SettingsDAO -[hidden]> TableContentDAO
ProjectDataDAO -[hidden]> UIElementDAO
TableContentDAO -[hidden]> GraphDAO



@enduml
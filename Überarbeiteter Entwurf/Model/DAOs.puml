@startuml


skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle

abstract class TableContentDAO <<abstract>> {
        +getRowsByIds(vararg ids: Integer): Flow<Row>
        +insertRow(row: Row, projectId: Integer)
        +deleteRows(projectId: Integer, vararg rows: Row)
        +changeRow(projectId: Integer, vararg rows: Row)
        '@Insert
        -insertRowEntity(row: RowEntity)
        '@Query("SELECT * FROM row WHERE projectId IN (:ids)")
        -getRowEntitiesByIds(vararg ids: Integer): Flow<RowEntity>
        '@Delete
        -deleteRowEntities(vararg rows: RowEntity)
        '@Update
        -changeRowEntities(vararg rows: RowEntity)
        -buildRowEntity(row: Row, projectId: Integer)
    }

    abstract class ProjectDataDAO <<abstract>> {
        '@Query("SELECT id, name, description, wallpaper, onlineId FROM project")
        +getAllProjectData(): Flow<List<ProjectData>>
        '@Query("SELECT id, name, description, wallpaper, onlineId
        '        FROM   project
        '        WHERE  id IN (:ids)")
        +getProjectDataByIds(vararg ids: Integer): Flow<List<ProjectData>>
        '@Query("SELECT id, name, description, wallpaper, onlineId
        '        FROM   project
        '        WHERE  id = :id)
        +getProjectData(id: Integer): ProjectData
        '@Query("UPDATE project SET name = :name WHERE id = :id")
        +setName(id: Integer, name: String)
        '@Query("UPDATE project SET description = :description WHERE id = :id")
        +setDescription(id: Integer, description: String)
        '@Query("UPDATE project SET wallpaper = :wallpaper WHERE id = :id")
        +setWallpaper(id: Integer, wallpaper: String)
        '@Query("UPDATE project SET onlineId = :onlineId WHERE id = :id")
        +setOnlineId(id: Integer, onlineId: Boolean)
        '@Query("SELECT * FROM user WHERE projectId IN (:ids)")
        +getUsersByIds(vararg ids: Integer): Flow<List<ProjectUserMap>>
        +addUser(projectId: Integer, user User)
        +removeUsers(projectId: Integer, vararg users: User)
        '@Query("SELECT id AS projectId, admin AS user FROM project WHERE id IN (:ids)")
        +getAdminByIds(vararg ids: Integer): Flow<List<ProjectUserMap>>
        '@Query("UPDATE project SET admin = :admin WHERE id = :projectId")
        +changeAdmin(projectId: Integer, admin: User)
        '@Insert
        +insertMissingSlot(missingSlot: MissingSlotEntity)
        '@Delete
        +deleteMissingSlot(missingSlot: MissingSlotEntity)
        '@Query("SELECT * FROM missingSlot WHERE projectId = :projectId")
        +getMissingSlots(projectId: Integer): List<MissingSlotEntity>
        '@Insert
        ~insertProjectEntity(project: ProjectEntity)
        '@Delete
        ~deleteProjectEntity(project: ProjectEntity)
        '@Insert
        -addProjectUserMap(userMap: ProjectUserMap)
        '@Delete
        -removeProjectUserMap(vararg userMaps: ProjectUserMap)
    }

'    abstract class SettingsDAO <<abstract>> {
'        +getProjectSettings(projectId: Integer): Flow<List<Pair<String, String>>>
'        +getGraphSettings(graphId: Integer): Flow<List<Pair<String, String>>>
'        +changeProjectSetting(projectId: Integer, key: String, value: String)
'        +changeGraphSetting(graphId: Integer, key: String, value: String)
'        +createProjectSetting(projectId: Integer, key: String, value: String)
'        +createGraphSetting(graphId: Integer, key: String, value: String)
'        +deleteProjectSetting(projectId: Integer, key: String, value: String)
'        +deleteGraphSetting(graphId: Integer, key: String, value: String)
'        '@Query("SELECT name, value FROM projectSetting WHERE projectId = :projectId")
'        -getProjectSettingsEntity(projectId: Integer): Flow<List<ProjectSettingEntity>>
'        '@Query("SELECT name, value FROM graphSetting WHERE graphId = :graphId")
'        -getGraphSettingsEntity(graphId: Integer): Flow<List<GraphSettingEntity>>
'        '@Update
'        -changeProjectSettingEntity(setting: ProjectSettingEntity)
'        '@Update
'        -changeGraphSettingEntity(setting: GraphSettingEntity)
'        '@Insert
'        -createProjectSettingEntity(setting: ProjectSettingEntity)
'        '@Insert
'        -createGraphSettingEntity(setting: GraphSettingEntity)
'        '@Delete
'        -deleteProjectSettingEntity(setting: ProjectSettingEntity)
'        '@Delete
'        -deleteGraphSettingEntity(setting: GraphSettingEntity
'    }

    abstract class LayoutDAO <<abstract>> {
        +getLayoutByIds(vararg ids: Integer): Flow<List<TableLayout>>
        +addColumn(id: Integer, type: Class<Any>, before: Integer): Integer
        +deleteColumn(id: Integer, columnId: Integer)
        '@Query("SELECT * FROM migration WHERE projectId = :projectId AND version > :version")
        +getMigrationsSince(projectId: Integer, version: Integer): List<MigrationEntity>
        '@Delete
        +deleteMigration(migration: MigrationEntity)
        '@Query("UPDATE project SET layout = :layout WHERE id = :projectId")
        -changeProjectLayout(projectId: Integer, layout: String)
        '@Query("UPDATE projectTemplate SET layout = :layout WHERE id = :templateId")
        -changeTemplateLayout(templateId: Integer, layout: String)
        '@Query("SELECT layout FROM project WHERE id IN (:ids)")
        -getProjectLayouts(vararg ids: Integer): Flow<List<String>>
        '@Query("SELECT layout FROM projectTemplate WHERE id IN (:ids)")
        -getTemplateLayouts(vararg ids: Integer): Flow<List<String>>
        '@Query("SELECT layout FROM project WHERE id = :id")
        -getProjectLayout(id: Integer): String
        '@Query("SELECT layout FROM projectTemplate WHERE id = :id")
        -getTemplateLayout(id: Integer): String
        '@Insert
        -insertMigration(migration: MigrationEntity)
        -getNextColumnId(id: Integer): Integer
    }

    abstract class GraphDAO <<abstract>> {
        '@Query("SELECT id, projectId, type, path FROM graph WHERE projectId IN (:ids)")
        +getGraphEntityForProjects(vararg ids: Integer): Flow<List<GraphEntity>
        '@Query("UPDATE graph SET path = :path WHERE projectId = :projectId AND id = :id")
        +changePath(projectId: Integer, id: Integer, path: String)
        '@Insert
        ~insertGraph(graph: GraphEntity)
        '@Delete
        ~deleteGraph(graph: GraphEntity)
    }

    abstract class UIElementDAO <<abstract>> {
        '@Query("SELECT * FROM uiElement
        '        WHERE projectId = :projectId
        +getUIElements(projectId: Integer): Flow<List<UIElementMap>>
        +insertUIElement(projectId: Integer, columnId: Integer, type: UIElementType): Integer
        +removeUIElements(projectId: Integer, vararg ids: Integer)
        '@Query("UPDATE uiElement
        '        SET state = :state
        '        WHERE projectId = :projectID AND id = :id")
        +changeUIElementState(projectId: Integer, id: Integer, state: String)
        '@Delete
        -removeUIElementMap(vararg uiElements: UIElementMap)
        '@Insert
        -insertUIElement(uiElement: UIElementMap)
        -getNextId(projectId: Integer): Integer
    }

    abstract class NotificationsDAO <<abstract>> {
        +getNotifications(projectId: Integer): Flow<List<Notification>>
        +insertNotification(projectId: Integer, notification: Notification): Integer
        +deleteNotification(projectId: Integer, notification: Notification)
        '@Query("UPDATE notification SET message = :message
        '        WHERE projectId = :projectId AND id = :id")
        +setNotificationMessage(projectId: Integer, id: Integer, message: String)
        '@Query("SELECT * FROM notification WHERE projectId = :projectId")
        -getNotificationEntities(projectId: Integer) Flow<List<NotificationEntity>>
        '@Insert
        -insertNotification(notification: NotificationEntity)
        '@Delete
        -deleteNotification(notification: NotificationEntity)
        -getNextId(projectId: Integer): Integer
    }

'    abstract class TemplateDAO <<abstract>> {
'        '@Query("SELECT * FROM projectTemplate")
'        +getAllProjectTemplateData(): Flow<List<ProjectTemplateEntity>>
'        '@Query("SELECT * FROM projectTemplate WHERE id in (:ids)")
'        +getProjectTemplateData(vararg ids: Integer): Flow<List<ProjectTemplateEntity>>
'        '@Query("SELECT * FROM projectTemplate WHERE createdBy = :creator")
'        +getProjectTemplateByCreator(creator: String): Flow<List<ProjectTemplateEntity>>
'        '@Query("UPDATE projectTemplate SET name = :name WHERE id = :id")
'        +setName(id: Integer, name: String)
'        '@Query("UPDATE projectTemplate SET description = :description WHERE id = :id")
'        +setDescription(id: Integer, description: String)
'        '@Query("UPDATE projectTemplate SET wallpaper = :wallpaper WHERE id = :id")
'        +setWallpaper(id: Integer, wallpaper: String)
'        '@Query("SELECT * FROM graphTemplate")
'        +getAllGraphTemplateData(): Flow<List<GraphTemplateEntity>>
'        '@Query("SELECT * FROM graphTemplate WHERE id in (:ids)")
'        +getGraphTemplateData(vararg ids: Integer): Flow<List<GraphTemplateEntity>>
'        '@Query("SELECT * FROM graphTemplate WHERE createdBy = :creator")
'        +getGraphTemplateByCreator(creator: String): Flow<List<GraphTemplateEntity>>
'        '@Query("UPDATE graphTemplate SET name = :name WHERE id = :id")
'        +setGraphTemplateName(id: Integer, name: String)
'        '@Query("UPDATE graphTemplate SET description = :description WHERE id = :id")
'        +setGraphTemplateDescription(id: Integer, description: String)
'        '@Insert
'        ~insertProjectTemplate(project: ProjectTemplateEntity)
'        '@Delete
'        ~deleteProjectTemplate(project: ProjectTemplateEntity)
'        '@Insert
'        ~insertGraphTemplate(graph: GraphTemplateEntity)
'        '@Delete
'        ~deleteGraphTemplate(graph: GraphTemplateEntity)
'    }

 '   ProjectDataDAO -[hidden]-> TableContentDAO
    TableContentDAO -[hidden]-> UIElementDAO
  UIElementDAO -[hidden]-> LayoutDAO
   ' TemplateDAO -[hidden]-> UIElementDAO
  '  SettingsDAO -[hidden]-> UIElementDAO
    ProjectDataDAO -[hidden]-> NotificationsDAO
    NotificationsDAO -[hidden]-> GraphDAO


@enduml
@startuml

skinparam monochrome true
skinparam shadowing false


skinparam lineType ortho
skinparam groupInheritance 22

skinparam genericDisplay old
skinparam classAttributeIconSize 0
skinparam Linetype ortho

hide circle

package Gson {}
package Kotlin{
class Throwable {
}
}

package Repository {
'=================================================================================================='
'Overleaf
package ViewModelInterface {
    'Overleaf deprecated
    class "PostHandler" as repoPostHandler <<singleton>> {
        +getPostPreviews(): Collection<Post>
        +getPostDetail(id: String): PostDetail
        'teplate downloaden via postid
        +getProjectTemplate(id: String): void
        'teplate downloaden via postid + index des graph temlates im Post
        +getGraphTemplate((id: String, index: int): void
    }

    'Overleaf
    class "ProjectHandler" as repoProjectHandler {
        +getProjectPreviews():  Flow<List<ProjectPreview>>
        +getProjectByID(id: int):Flow<Project>
        + getGraphs(projectId: Int) : Flow<List<Graph>>
        + getGraphTemplates(projectTemplateId: Int) :  Flow<List<GraphTemplate>>
        +  getProjectTemplatePreviews() : Flow<List<ProjectTemplatePreview>>
        + getProjectTemplate(id: Int) : Flow<ProjectTemplate>
        + newProjectAsync(project: Project) :  Deferred<Deferred<Int>>
        + joinOnlineProject(onlineID: Long): Int
        + getProjectTemplateByID() : int
        + deleteProjectTemplate(id: Int)
        + deleteGraphTemplate(id: Int)

    }
    class "ServerHandler" as repoServerHandler {
    + getPostPreviews(): List<Post>
    +getPostDetail(postId: int): PostDetail
    +getProjectTemplate(postId: int) : ProjectTemplate
    +getGraphTemplate(postId: int, index: int): GraphTemplate
    +isServerCurrentlyReachable(): boolean
    + login(email: String, password: String)
    +signUp(email: String, password: String)
    + downloadProjectTemplate(id : Int)
    +downloadGraphTemplate(projectId : Int, graphId : Int)
    }
    package CommunicationClasses {

    class "Post" as repoPost{
    + title : String
    + image : Bitmap
    + id : int
    + graphTemplate : GraphTemplate
    + projectTemplate : ProjectTemplate
    }

    class PostDetail{
    }


class "ProjectTemplate" as repoProjectTemplate implements Identifiable {
+ onlineID: Long
+ title: String
+ description: String
+  wallpaper: Int
+ table: List<Column>
+ buttons: List<Button>
+ notifications: List<Notification>
+ graphTemplates: List<GraphTemplate>
}


    class "Column" as repoColumn implements Identifiable{
            id : int
            name : String
            unit : String
            datatype : DataType

        }

    class ProjectTemplatePreview implements Identifiable{
    + name : String
    + desc: String
    + color : int
    + layout : List<Column>
    + image: Bitmap
    }

        class "GraphTemplate" as repoGraphTemplate {
        + title: String
        +image: Bitmap
        + id: int
        }

        class "Button"  as repoButton implements Identifiable, Convertible{
            id : Int
            name : String
            columnId : int
            value : int

            +increaseValue()
            +decreaseValueIsPossible(): Flow<Boolean>
            +decreaseValue()
            + setValueIsPossible(): Flow<Boolean>
            +setValue(value: Int)
        }

        class "Notification" as repoNotification implements Identifiable, Convertible{
           + message : String
            +time : Time
            +timeNotification: TimeNotification
        }



        class "Member" as repoMember implements Identifiable, Convertible {
            name : String
            user: User
        }

        class "ProjectPreview" as repoProjectPreview implements Identifiable{
            name : String
            image : String
        }

       abstract class "Graph"  as Graph implements Identifiable, Convertible {
          {abstract}  image : Bitmap
          {abstract} typeName : String

           + {static} createFromType(graph: String) Graph
           + {static} fun createFromTemplate(graph: GraphTemplate):Graph
        }

        class "LineChart" as repoLineChart extends Graph{
            dotSize : DotSize
            dotColor : int
            lineType : LineType
            mappingVertical : List<Column>

           +  addVerticalMappingIsPossible(): Flow<Boolean>
           +  addVerticalMapping(column: Column)
           +  deleteVerticalMappingIsPossible(): Flow<Boolean>
           +  deleteVerticalMapping(index: Int)
           +  changeDotSizeIsPossible(): Flow<Boolean>
           +   changeDotSize(dotSize: DotSize)
           +  changeDotColorIsPossible(): Flow<Boolean>
           + changeDotColor(color: Int)
           + changeLineTypeIsPossible(): Flow<Boolean>
           + changeLineType(lineType: LineType)
           + showIsPossible(): Flow<Boolean>
           + show(context: Context): View

        }

        enum "DotSize" as repoDotSize <<Enum>> {
        +representation: String
        + size: Float
        ..
            SMALL
            MEDIUM
            BIG
        }

        enum "LineType" as repoLineType <<Enum>> {
        + representation : String
        ..
            DOTTED
            NONE
            CONTINUOUS
        }

        class "PieChart" as repoPieChart extends Graph{
            color : List<Int>
            mapping : List<Column>
            showPercentages : Boolean
             + addMappingColorIsPossible(): Flow<Boolean>
             + addMapping(color: Int, column: Column)
             + addMappingIsPossible(): Flow<Boolean>
             + addMapping(column: Column)
             + showPercentagesIsPossible(): Flow<Boolean>
             + showPercentages(show: Boolean)
        }

        enum PieChartColors{
        + value : long
        + representation : String
        ..
        ORANGE
        GREEN
        BLUE
        }



        enum "DataType" as repoDataType <<Enum>> {
       + representation: String,
            + regex: String,
            + serializableClassName: String
..
            WHOLE_NUMBER
            FLOATING_POINT_NUMBER
            TIME
            STRING
            {static} fromString(rep: String): DataType
            {static} fromSerializableClassName(rep: String): DataType
        }

        class "Project" as repoProject implements Identifiable{

           + isOnlineProject : Boolean
            +isAdmin : Boolean
            +title : String
           + description : String
           + wallpaper : int
           + table : List<Column>
           + data : List<Row>
           + buttons : List<Button>
           + notifications : List<Notification>
          +  graphs : List<Graph>
          + members : List<Member>

          +update(projectData: ProjectData)
          + publish()

          + addGraph(graph: Graph)
          + addRow(row: Row)
          + deleteRow(row: Row)
          + addColumn(column: Column)
          + deleteColumn(column: Column)
          + addButton(button: Button)
          + deleteButton(button: Button)
          + setCell(indexRow: Int, indexColumn: Int, content: String)
          + addMember(member: Member)
          + leaveOnlineProject()
          +  deleteMember(member: Member)
          + setAdmin(member: Member)
          + changeWallpaper(image: Int)
          + setNotification(notification: Notification)
          +deleteNotification(notification: Notification)
          + addNotification(notification: Notification)
          + setName(name: String)
          + setDescription(description: String)
       + setButton(button: Button)





        }

        note left of repoProject::addGraph{
        every method below has its
        methodIsPossible:Flow<Boolean>

        }

        class "Row" as repoRow {
          +  elements : List<String>
+ setCellIsPossible(): Flow<Boolean>
+ setCell(indexColumn: Int, content: String)



        }

        interface "Convertible<I>" as Convertible{
        + toDBEquivalent(): I
        + fun addYourself(builder: ProjectBuilder<Project>)
        }

        interface Identifiable{
        +id : int
        + executionQueue: ExecuteQueue
        + deleteIsPossible(): Flow<Boolean>
        + delete()
        + connectToDB(executeQueue: ExecuteQueue)
        }


        repoProject ..> repoColumn
        repoProject ..> repoRow
        repoProject ..> Graph
        repoProject ..> repoButton
        repoProject ..> repoMember
        repoProject ..> repoNotification

        repoLineChart ..> repoLineType
        repoLineChart ..> repoDotSize
        repoLineChart ..> repoColumn

        repoPieChart ..> repoColumn

        repoColumn ..> repoDataType

        repoPost ..> repoGraphTemplate
        repoPost ..> repoProjectTemplate

        PieChartColors <.. repoPieChart
        ProjectTemplatePreview ..> repoColumn
    }


}

'=================================================================================================='
  'Overleaf deprecated
  package CommandCenter {
    'Overleaf deprecated

    'Overleaf deprecated
     class "CommandUtility" as CommandUtility <<static>> {
        +{static} setServerInfo(ProjectCommand, serverInfo: ServerInfo):ProjectCommand
        +{static} toNewCommand(ProjectCommand): ProjectCommand
     }

     class CommandQueue <<abstract>> {
     + appDataBase: AppDataBase
     + remoteDataSourceAPI: RemoteDataSourceAPI

     <<abstract>> performCommandAction(command: ProjectCommand)
     <<abstract>> commandActionSucceedsProbably() : Boolean
     <<abstract>> beforeCommandActionAttempt(command: ProjectCommand)
     <<abstract>> commandFailedAction(command: ProjectCommand)
     add(projectCommand: ProjectCommand)
     }

     class ExecuteQueue extends CommandQueue{
     +appDataBase: AppDataBase
     +remoteDataSourceAPI: RemoteDataSourceAPI
     + performCommandAction(command: ProjectCommand)
     + commandActionSucceedsProbably(): Boolean
     + beforeCommandActionAttempt(command: ProjectCommand)
     + commandFailedAction(command: ProjectCommand)
     + update()
     }

     class PublishQueue extends CommandQueue{
    + appDataBase: AppDataBase
    + remoteDataSourceAPI: RemoteDataSourceAPI

    + performCommandAction(command: ProjectCommand)
    + commandActionSucceedsProbably(): Boolean
    + beforeCommandActionAttempt(command: ProjectCommand)
    + commandFailedAction(command: ProjectCommand)
     }

    class ServerUnreachableException implements Throwable{}

   '-----------------------------------------------------------------------------------------------'
     'Overleaf deprecated
     package UpToDater {
           'Wenn ich einmal länger als 72h am Stück offline war merke ich mir diese Intervalle
           'dann Frage ich jemanden auf dem Server an, der in diesen 72h keine Blindspots hat
           'Overleaf
           class "OldDataFetcher" as repoOldDataFetcher {
           +from: DateTime
           +to: DateTime
           +from: ProjectID
           'null == daten nicht vorhanden
           +getOldData(): List<OldData>
           }
     }
   '-----------------------------------------------------------------------------------------------'
   package Commands {

   abstract class "ProjectCommand" as repoProjectCommand <<abstract>>{
       +projectID: ProjectID
       +OnlineProjectID: OnlineProjectID
       +wentOnline: LocalDateTime
       +serverRemoveTime: DateTime
       +commandByUser: String
       +isProjectAdmin: boolean
       + cameFromServer: boolean

       +{static} isPossible(project:Project):Boolean
       {abstract}+execute() throws ServerUnreachableException
       {abstract}+publish()
   }

   <>PLACEHOLDER


   class AddMember extends PLACEHOLDER{
      + {static} isPossible(project: Project): boolean
   }
   class AddRow {
        + {static} isPossible(project: Project): boolean

   }
   class DeleteRow {
      +index: Int

   }
   class DeleteColumn {
      +index: Int

   }
   class AddColumn {
      +projectID: int
      + column: Column
      {static} isPossible(project: Project, type: DataType): boolean
   }

   class AddButton extends PLACEHOLDER{
   + id: int
   + button : Button

   + {static} isPossible(project: Project): boolean
   }
   class SetCell {
      +indexColumn: Int
      +indexRow: Int

   }
   class SetAdmin {
      +UserID: String

   }

   class RemoveUser {
      +UserID: String

   }
   class AddGraph {
      + id: int
      + graph: Graph
      + {static} isPossible(project: Project): boolean

   }
   class SetCalculationFunction {

   }
   class SetTransformationFunctionComposition {

   }
   class SetSetting {
      +name: String
      +value: String

   }
   class SetProjectName {
      +value: String

   }
   class SetProjectDescription {
      +value: String

   }
   class SetWallpaper {
      +value: Drawable

   }
   class AddNotification extends PLACEHOLDER{
      + id : int
      + notification : Notification
      + {static} isPossible(project: Project): boolean

   }
   class DeleteNotification {
      +notificationID: String

   }
   class SetUIElement {

   }
   class RequestOldData {
      +from: DateTime
      +to: DateTime
      
   }
   class PublishProject extends PLACEHOLDER {

         + {static} isPossible(project: Project): boolean

   }
   class CreateProject {
        + {static} isPossible(project: Project): boolean

   }
   class JoinOnlineProject extends PLACEHOLDER{
      + {static} isPossible(project: Project): boolean

   }
   class CommandWrapper {
   +commandCanonicalName: String
   +commandJson: String

   +Constructor(command: ProjectCommand)
   +toJson(): String
   +unwrap(): ProjectCommand
   -jsonFromCommand(ProjectCommand): String
   }

   'Overleaf
   class IllegalOperationException {
       }

   }
  }

  CommandWrapper .> Gson: <<uses>>
  IllegalOperationException .> Throwable: <<implements>>


  together {

    PLACEHOLDER ^-- AddColumn
    PLACEHOLDER ^-- AddRow
    PLACEHOLDER ^-- DeleteRow
    PLACEHOLDER ^-- DeleteColumn
    PLACEHOLDER ^-- SetCell
    PLACEHOLDER ^-- SetAdmin
    PLACEHOLDER ^--- RemoveUser
    PLACEHOLDER ^--- AddGraph
    PLACEHOLDER ^--- SetCalculationFunction
    PLACEHOLDER ^--- SetTransformationFunctionComposition
    PLACEHOLDER ^--- SetSetting
    PLACEHOLDER ^--- SetProjectName
    PLACEHOLDER ^--- SetProjectDescription
    PLACEHOLDER ^---- SetWallpaper
    PLACEHOLDER ^---- DeleteNotification
    PLACEHOLDER ^---- SetUIElement
    PLACEHOLDER ^---- RequestOldData
    PLACEHOLDER ^---- CreateProject

ExecuteQueue -- PublishQueue
  }

}

@enduml
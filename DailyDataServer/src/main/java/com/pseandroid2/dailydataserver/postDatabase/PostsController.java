/*

    DailyData is an android app to easily create diagrams from data one has collected
    Copyright (C) 2022  Antonia Heiming, Anton Kadelbach, Arne Kuchenbecker, Merlin Opp, Robin Amman

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
package com.pseandroid2.dailydataserver.postDatabase;

import com.pseandroid2.dailydataserver.RequestParameter;
import com.pseandroid2.dailydataserver.postDatabase.requestparameters.AddPostParameter;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Interface for all interaction for Posts
 * /**
 *  * #TODO Testen, JavaDoc
 *  */

@RestController
@RequestMapping("/Posts")
public class PostsController {

    /**
     * Provides all PostsPreviews with their PostIds.
     *
     * @param token the token, to verify the user, provided by the client
     * @return a list with all PostPreview and the Post ids.
     */
    @GetMapping("/allPreview")
    public List<String> getAllPostPreview(@RequestHeader String token) {

        return new ArrayList<String>();
    }

    /**
     * Provides all Templates from fromPost. Returns the identifier and the DetailView from a template
     *
     * @param fromPost declares from which post the postDetail is recommended, provided by the client
     * @return a list of all template detailViews with TemplateNumber together, each as String.
     */
    @GetMapping("/detail/{post}")
    public List<String> getPostDetail( @PathVariable("post") int fromPost, @RequestBody RequestParameter param) {

        return new ArrayList<String>();
    }

    /**
     * Provides the projectTemplate from the post fromPost
     *
     * @param fromPost declares from which post the projectTemplate is recommended, provided by the client.
     * @return the projectTemplate as JSON
     */
    @GetMapping("/{post}/projectTemplate")
    public String getProjectTemplate( @PathVariable("post") int fromPost, @RequestBody RequestParameter param) {
        return "TODO";
    }

    /**
     * Provides a specified GraphTemplate.
     *
     * @param fromPost       declares from which project the graph template is recommended, provided by the client
     * @param templateNumber declares which template is recommended, provided by the client.
     * @return the GrapgTemplate as JSON
     */
    @GetMapping("/{post}/{template}")
    public String getGraphTemplate( @PathVariable("post") int fromPost, @PathVariable("template") int templateNumber, @RequestBody RequestParameter param) {
        return "TODO";
    }

    /**
     * adds a new Post.
     *
     * @return the postID of the new post.
     */
    @PostMapping("/add")
    public int addPost(@RequestBody AddPostParameter params) {
        return 0;
    }

    /**
     * Removes a post if the user is allowed to remove it.
     *
     * @param user   the user, who wants to remove a post. Generated by the client.
     * @param postID which Post should be removed.
     * @return if the post could be removed.
     */
    @DeleteMapping("/remove/{post}")
    public boolean removePost(@RequestAttribute String user, @PathVariable("post") int postID, @RequestBody RequestParameter param) {
        return true;
    }


}

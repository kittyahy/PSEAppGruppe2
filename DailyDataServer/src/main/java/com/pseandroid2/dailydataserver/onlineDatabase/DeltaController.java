/*

    DailyData is an android app to easily create diagrams from data one has collected
    Copyright (C) 2022  Antonia Heiming, Anton Kadelbach, Arne Kuchenbecker, Merlin Opp, Robin Amman

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
package com.pseandroid2.dailydataserver.onlineDatabase;

import com.pseandroid2.dailydataserver.RequestParameter;
import com.pseandroid2.dailydataserver.onlineDatabase.requestParameters.deltaController.ProvideOldDataParameter;
import com.pseandroid2.dailydataserver.onlineDatabase.requestParameters.deltaController.SaveDeltaParameter;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

/**
 * #TODO Testen, JavaDoc
 */
@RestController
@RequestMapping("/OnlineDatabase/Delta")
public class DeltaController {

    /**
     * creates a new delta for a project to save one command.
     *
     * @param projectId declares to which projects the command belongs, provided by client
     * @param user      the user, who adds the Data, generated by the server
     * @param params    the data which are recommended to save a delta, provided by client
     */
    @PostMapping("/save/{projectId}")
    public void saveDelta(@PathVariable long projectId, @RequestAttribute String user,
                          @RequestBody SaveDeltaParameter params) {
    }

    /**
     * Provides all new Deltas which belongs to a project and all old deltas which belongs to the user.
     *
     * @param projectId declares from which the delta is recommended, provided by the client.
     * @param user      the user, who adds the Data, generated by the server
     * @param param     the deta, which the client provides.
     * @return a list of recommended Deltas
     */
    @GetMapping("/get/{projectId}")
    public List<Delta> getDelta(@PathVariable long projectId, @RequestAttribute String user,
                                @RequestBody RequestParameter param) {
        return new ArrayList<>();
    }

    /**
     * recreates an old delta, for a defined person and project.
     *
     * @param projectId to which project the delta belongs, provided in the URL
     * @param user      the user, who adds the Data, generated by the server
     */
    @PostMapping("/provide/{projectId}")
    public void provideOldData(@PathVariable long projectId, @RequestAttribute String user,
                               @RequestBody ProvideOldDataParameter params) {
    }

    /**
     * Returns the time, after which a new delta gets deleted.
     *
     * @return time, after which a delta gets deleted.
     */
    @GetMapping("/time")
    public long getRemoveTime(@RequestBody RequestParameter param) {
        return 0; //wahrscheinlich Ã¤ndert sich das nochmal. ich muss irgendwie an eine feste Zeitspanne kommen. d.h ggf. long oder so

    }
}

/*

    DailyData is an android app to easily create diagrams from data one has collected
    Copyright (C) 2022  Antonia Heiming, Anton Kadelbach, Arne Kuchenbecker, Merlin Opp, Robin Amman

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
package com.pseandroid2.dailydataserver.onlineDatabase;

import com.pseandroid2.dailydataserver.onlineDatabase.FetchRequestDB.FetchRequest;
import com.pseandroid2.dailydataserver.onlineDatabase.requestParameters.fetchRequestController.DemandOldDataParameter;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

/**
 * interface for "talking" about old data
 * <p>
 * the user can post request for old Data und can get request for a project to help other participants
 * #TODO Testen
 */
@RestController
@RequestMapping("/OnlineDatabase/request")
public class FetchRequestController {

    /**
     * Saves a request for old Data by the client.
     * Another participant of the same can fetch such requests.
     *
     * @param user      the client, who needs old Data (generated by the server)
     * @param projectID the project to which the request belongs (provided by the client)
     * @param params    all information, which are necessary to save a fetchRequest. {@link DemandOldDataParameter} specifies all parameters.
     */
    @PostMapping("/need/{id}")
    public void demandOldData(@RequestAttribute String user, @PathVariable("id") long projectID, @RequestBody DemandOldDataParameter params) {

    }

    /**
     * Provides all {@link FetchRequest}, which belongs to the project.
     *
     * @param user      the user, who wants the requests (generated by the server)
     * @param projectId the project, to which the requests belong (provided by the client)
     * @return a list of {@link FetchRequest}
     */

    @GetMapping("/provide/{id}")
    public List<FetchRequest> getFetchRequests(@RequestAttribute String user, @PathVariable("id") long projectId) {

        return new ArrayList<FetchRequest>();
    }
}
